---
config:
  image:
    entrypoint: [""]
    name: $CI_REGISTRY_IMAGE:latest
  needs:
    - job: docker-build
  script:
    - echo hello
  stage: config
docker-build:
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  image: docker:24.0.2-alpine3.18
  needs:
    - artifacts: true
      job: get_version
  only:
    refs:
      - main
      - dev
  script:
    - |
      if [[ $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH ]]; then
        TAG=$(cat version.txt)
        LABEL="latest"
      else
        TAG=$(cat fullSemVer.txt)
        LABEL=$(cat preReleaseLabel.txt)
      fi
    - docker build --pull -t "$CI_REGISTRY_IMAGE:${TAG}" .
    - docker tag "$CI_REGISTRY_IMAGE:${TAG}" "$CI_REGISTRY_IMAGE:$LABEL"
    - docker tag "$CI_REGISTRY_IMAGE:${TAG}" "$CI_REGISTRY_IMAGE:$TAG"
    - docker push "$CI_REGISTRY_IMAGE:$LABEL"
    - docker push "$CI_REGISTRY_IMAGE:$TAG"
  services:
    - docker:dind
  stage: build
get_version:
  artifacts:
    paths:
      - "*.txt"
  image:
    entrypoint: [""]
    name: gittools/gitversion:5.12.0-alpine.3.14-6.0
  only:
    refs:
      - main
      - dev
  script:
    - /tools/dotnet-gitversion /nocache /nofetch /showvariable MajorMinorPatch > version.txt
    - /tools/dotnet-gitversion /nocache /nofetch /showvariable FullSemVer > fullSemVer.txt
    - /tools/dotnet-gitversion /nocache /nofetch /showvariable PreReleaseLabel > preReleaseLabel.txt
    - cat *.txt
  stage: version
  variables:
    GIT_DEPTH: 0
    GIT_STRATEGY: fetch
    IGNORE_NORMALISATION_GIT_HEAD_MOVE: 1
stages:
  - version
  - build
  - push
  - config
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH =~ /^main|master$/
      when: always
    - if: $CI_COMMIT_BRANCH =~ /^dev(elop)?(ment)??$/
      when: always
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME =~ /^dev(elop)?(ment)??$/
      when: always
